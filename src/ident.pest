WHITESPACE = _{ " " | "\t" | "\n" | "\r" }

COMMENT = _{ "//" ~ (!("\n" | "\r") ~ ANY)* }

// Keywords & Operators
enum = _{ "enum" }
define = _{ "define" }
protocol = _{ "protocol" }
when = _{ "when" }
choice = _{ "choice" }
based = _{ "based" }
on = _{ "on" }
endian = _{ "endian" }
padding = _{ "padding" }
to = _{ "to" }
in = _{ "in" }
covers = _{ "covers" }
length = _{ "length" }
context_length = _{ "context_length" }
TLV = _{ "TLV" }
default = _{ "default" }

// Primitives
NUMBER = @{ ASCII_DIGIT+ }
STRING = @{ "\"" ~ (!"\"" ~ ANY)* ~ "\"" }
IDENTIFIER = @{ ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | "_")* }
HEX_NUMBER = @{ "0x" ~ ('0'..'9' | 'a'..'f' | 'A'..'F')+ }
BASE_TYPE = @{ "u8" | "u16" | "u32"| "u64" | "u128" | "i8" | "i16" | "i32" | "i64" | "i128" }

simple_data_type = { !("enum" | "choice" | "when") ~ (BASE_TYPE ~ bitwidth? ~ endianness? | IDENTIFIER) }
bitwidth = { ":" ~ NUMBER }
endianness = { "big-endian" | "little-endian" }

generic_array_data_type = { "[" ~ DATA_TYPE ~ ";" ~ expression ~ "]" }
open_array_data_type = { "[" ~ DATA_TYPE ~ "]" }
simple_array_data_type = { simple_data_type ~ "[" ~ expression ~ "]" }

array_data_type = { generic_array_data_type | open_array_data_type | simple_array_data_type }

enum_data_type = { enum ~ underlying_type ~ "{" ~ enum_item* ~ "}" }
underlying_type = { simple_data_type }
enum_item = { numeric_value ~ ":" ~ STRING ~ ";" }

choice_data_type = { choice ~ (simple_choice_type | conditional_choice_type) }
simple_choice_type = { "{" ~ !("based") ~ (DATA_TYPE ~ ";")+ ~ "}" }

parametrized_data_type = { IDENTIFIER ~ "(" ~ IDENTIFIER ~ ("," ~ IDENTIFIER)* ~ ")" }

conditional_choice_type = { based ~ on ~ IDENTIFIER ~ "{" ~ (choice_item ~ ";")+ ~ "}" }
choice_item = { STRING ~ ":" ~ IDENTIFIER ~ structure_body | default ~ ":" ~ IDENTIFIER? ~ structure_body }

choice_block = { choice ~ based ~ on ~ IDENTIFIER ~ "{" ~ (choice_block_item)+ ~ "}"  }
choice_block_item = { STRING ~ ":" ~ IDENTIFIER? ~ structure_body | default ~ ":" ~ IDENTIFIER ~ structure_body }

conditional_data_type = { when ~ "{" ~ multi_condition_type_item+ ~ "}" }
multi_condition_type_item = { expression ~ ":" ~ IDENTIFIER? ~ structure_body }

conditional_block = { when ~ expression ~ "{" ~ structure_item+ ~ "}" ~ ";" }
multi_conditional_block = { when ~ "{" ~ multi_condition_item+ ~ "}" ~ ";" }
multi_condition_item = { expression ~ ":" ~ IDENTIFIER? ~ structure_body }

structure_body = { "{" ~ structure_item* ~ "}" }

typed_assignment_item = { IDENTIFIER ~ ":" ~ DATA_TYPE ~ "=" ~ expression ~ ";" }
regular_item = { IDENTIFIER ~ ":" ~ DATA_TYPE ~ ";" }

structure_item = { 
  regular_item |
  typed_assignment_item |
  conditional_block |
  multi_conditional_block |
  choice_block
}


DATA_TYPE = { 
   parametrized_data_type |
   array_data_type | 
   simple_data_type | 
   enum_data_type | 
   choice_data_type | 
   conditional_data_type |
   structure_body 
}

// Protocol Definition Parts
definition_block = { define ~ "{" ~ definition* ~ "}" }

definition = _{ definition_item ~ ";" }
definition_item = _{ 
    type_definition 
}

type_definition = { IDENTIFIER ~ type_parameters? ~ "=" ~ DATA_TYPE }
type_parameters = { "(" ~ type_parameter ~ ("," ~ type_parameter)* ~ ")" }
type_parameter = { IDENTIFIER ~ ":" ~ DATA_TYPE }


protocol_definition = { protocol ~ IDENTIFIER ~ structure_body }

expression = { term ~ (operation ~ term)* }
term = _{ factor ~ (operation ~ factor )* }
factor = _{ value | "(" ~ expression ~ ")" }

// expression = { value ~ (operation ~ value)* }
value = _{ HEX_NUMBER | NUMBER | IDENTIFIER | STRING }
numeric_value = _{ HEX_NUMBER | NUMBER }
operation = _{ "+" | "-" | "*" | "/" | "<=" | ">=" | "<" | ">" | "==" }


// Entry Rule
file = { SOI ~ (definition_block | protocol_definition)* ~ EOI }



